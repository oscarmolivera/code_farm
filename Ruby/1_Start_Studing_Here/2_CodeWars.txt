1) 2) 3) 4) 5) 6) 7) 8) 9) 

1) Up Array
Given an array of integers of any length, return an array that has 1 added to the value
represented by the array.
The array can't be empty, only non-negative, single digit integers are allowed.

Return nil (or your language's equivalent) for invalid inputs.

Sample Test Cases {
  p up_array([2, 3, 9]) # => [2, 4, 0]
  p up_array([4, 3, 2, 5]) # => [4, 3, 2, 6]
  p up_array([1, -9]) # => nil
  p up_array([1, 2, 34]) # => nil
  p up_array([0, 1]) # =>  [0, 2]
  p up_array([]) # => nil
}
[
  * convertir todos los elementos del arreglo en un numero sting (.JOIN)
  * sumarle uno mas con el metodo .SUCC
  * volverlo a convertir en un arreglo con .CHARS
  * iterar con .MAP para convertir cada numero en un entero otra vez
  * comparar el tamaÃ±o de l arreglo contra el string creado con .JOIN si son diferentes retornar nil
]

---------------------
2)Vowel count
Return the number (count) of vowels in the given string. We will consider a, e, i, o, and
u as vowels for this Kata.
The input string will only consist of lower case letters and/or spaces.

Sample Test Cases {
  p vowel_count('usando') # => 3
  p vowel_count('ele ent o') # => 4
  p vowel_count(' rmpdl zdr') # => 0
}
[
  * usando el metodo .SCAN crear un arreglo a partir de el regexp /[aeiou]/
  * .COUNT al arreglo
]
---------------------        
3)
---------------------
4) 
---------------------
5)
---------------------        
6)
---------------------
7) 
---------------------
8)
---------------------        
9)
---------------------
10) 
---------------------